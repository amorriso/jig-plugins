#!/usr/bin/env python
import json
import re
import sys

import pep8

data = json.loads(sys.stdin.read())
files = data['files']
config = data['config']

# Settings
default_type = config.get('default_type', 'warn')
report_E501 = True if config.get('report_e501', 'yes') == 'yes' else False

# Initialize the pep8 options, this is needed to make everything work
options, args = pep8.process_options(['pep8'])

message_breaker = re.compile(r'''
    (?P<filename>.*):
    (?P<line>[0-9]+):
    (?P<column>[0-9]+):
    \ (?P<message>.+)''', re.VERBOSE)

out = {}

for f in files:
    if f['type'] == 'deleted':
        # File is deleted
        continue

    if not f['name'].endswith('.py'):
        # Not a Python file
        continue

    lines = [i for i in f['diff'] if i[1] != '-']

    collected = []

    def collector(message):
        match = message_breaker.search(message)
        if not match:
            return
        parts = match.groupdict()

        if not report_E501 and 'E501' in parts['message']:
            # We are not supposed to report this
            return

        collected.append([parts['line'], default_type, '{}\n     - {}'.format(
            lines[int(parts['line']) - 1][2].strip(), parts['message'])])

    # Replace with our collector
    setattr(pep8, 'message', collector)
    checker = pep8.Checker(f['filename'])
    checker.check_all()

    out[f['name']] = collected

# Finally, write to stdout the JSON encoded output
sys.stdout.write(json.dumps(out, indent=4))

# Tell Git that the plugin ran successfully (according to design)
sys.exit(0)
